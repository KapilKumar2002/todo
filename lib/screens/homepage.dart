import 'package:authapi/constants/constants.dart';
import 'package:authapi/models/authapiModel.dart';
import 'package:authapi/screens/signin.dart';
import 'package:flutter/material.dart';
import 'package:get/get_connect/http/src/response/response.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

class HomePage extends StatefulWidget {
  final String username;
  const HomePage({super.key, required this.username});

  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  TextEditingController _titleController = TextEditingController();
  TextEditingController _descController = TextEditingController();
  List<Autogenerated> userlist = [];
  List<UserTodo> usertodo = [];

  Future<void> saveData() async {
    final String textVal = _titleController.text;
    final String desVal = _descController.text;
    SharedPreferences prefs = await SharedPreferences.getInstance();
    var username = prefs.getString('username');

    int users = userlist.length;

    if (textVal.isNotEmpty && desVal.isNotEmpty) {
      for (var i = 0; i < users; i++) {
        if (userlist[i].username == username) {
          String owner = userlist[i].id.toString();
          final response = await http.post(Uri.parse(Constants.url + "/todos/"),
              headers: {
                "Content-Type": "application/json",
                "Accept": "application/json",
              },
              body: json
                  .encode({"title": textVal, "desc": desVal, "owner": owner}));

          if (response.statusCode == 201) {
            ScaffoldMessenger.of(context).showSnackBar(SnackBar(
              content: Text("Data saved"),
              backgroundColor: Constants.themeColor,
            ));
          }
        }
      }
    } else {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
        content: Text("Invalid credentials!"),
        backgroundColor: Constants.themeColor,
      ));
    }
    setState(() {
      usertodo = [];
    });
    // getdata();
  }

  Future<void> getInputtext() async {
    await showModalBottomSheet(
        backgroundColor: Color.fromARGB(255, 168, 231, 229),
        isScrollControlled: true,
        context: context,
        builder: (BuildContext ctx) {
          return Padding(
            padding: EdgeInsets.only(
                top: 20,
                left: 20,
                right: 20,
                bottom: MediaQuery.of(ctx).viewInsets.bottom + 20),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                TextField(
                  controller: _titleController,
                  decoration: const InputDecoration(
                    labelText: 'Task',
                  ),
                ),
                TextField(
                  controller: _descController,
                  decoration: const InputDecoration(
                    labelText: 'Description of Task',
                  ),
                ),
                const SizedBox(
                  height: 20,
                ),
                ElevatedButton(
                  child: const Text('Add'),
                  style: ElevatedButton.styleFrom(
                    elevation: 10,
                    backgroundColor: Constants.themeColor,
                  ),
                  onPressed: () {
                    saveData();
                    _titleController.text = '';
                    _descController.text = '';
                    Navigator.of(context).pop();
                    // }
                  },
                )
              ],
            ),
          );
        });
  }

  Future<http.Response> deleteAlbum(String id) async {
    final http.Response response = await http.delete(
      Uri.parse(Constants.url + "/todos/" + id),
      headers: <String, String>{
        'Content-Type': 'application/json; charset=UTF-8',
        'Accept': "application/json",
      },
    );

    if (response.statusCode == 204) {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
        content: Text("Completed task has been Deleted by you"),
        backgroundColor: Constants.themeColor,
      ));
    }
    return response;
  }

  Future<void> updateData(String id, String owner) async {
    final String textVal = _titleController.text;
    final String desVal = _descController.text;
    if (textVal.isNotEmpty && desVal.isNotEmpty) {
      final response = await http.put(
        Uri.parse(Constants.url + "/todos/" + id),
        headers: <String, String>{
          'Content-Type': 'application/json; charset=UTF-8',
          'Accept': 'application/json',
        },
        body: jsonEncode(<String, String>{
          'title': _titleController.text,
          'desc': _descController.text,
          'owner': owner,
        }),
      );
      if (response.statusCode == 200) {
        ScaffoldMessenger.of(context).showSnackBar(SnackBar(
          content: Text("Task has been updated by you"),
          backgroundColor: Constants.themeColor,
        ));
      }
    } else {
      ScaffoldMessenger.of(context).showSnackBar(SnackBar(
        content: Text("Invalid credentials!"),
        backgroundColor: Constants.themeColor,
      ));
    }
    setState(() {
      usertodo = [];
    });
  }

  Future<void> updatedata(
      String id, String task, String taskdesc, String owner) async {
    if (task.isNotEmpty && taskdesc.isNotEmpty) {
      _titleController.text = task;
      _descController.text = taskdesc;
    }
    await showModalBottomSheet(
        backgroundColor: Color.fromARGB(255, 168, 231, 229),
        isScrollControlled: true,
        context: context,
        builder: (BuildContext ctx) {
          return Padding(
            padding: EdgeInsets.only(
                top: 20,
                left: 20,
                right: 20,
                bottom: MediaQuery.of(ctx).viewInsets.bottom + 20),
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                TextField(
                  controller: _titleController,
                  decoration: const InputDecoration(
                    labelText: 'Task',
                  ),
                ),
                TextField(
                  controller: _descController,
                  decoration: const InputDecoration(
                    labelText: 'Description of Task',
                  ),
                ),
                const SizedBox(
                  height: 20,
                ),
                ElevatedButton(
                  child: const Text('Update'),
                  style: ElevatedButton.styleFrom(
                      elevation: 10, backgroundColor: Constants.themeColor),
                  onPressed: () {
                    updateData(id, owner);
                    _titleController.text = '';
                    _descController.text = '';
                    Navigator.of(context).pop();
                    // }
                  },
                )
              ],
            ),
          );
        });
  }

  Future<List<UserTodo>?> getdata() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    var email = prefs.getString('email');
    var username = prefs.getString('username');
    userlist = [];
    var response = await http.get(Uri.parse("http://10.0.2.2:8000"));
    var data = jsonDecode(response.body.toString());

    if (response.statusCode == 200) {
      for (Map<String, dynamic> i in data) {
        userlist.add(Autogenerated.fromJson(i));
      }
      int users = userlist.length;

      for (var i = 0; i < users; i++) {
        if (userlist[i].username == username) {
          usertodo = userlist[i].userTodo!;
        }
      }
      if (usertodo.isNotEmpty) {
        return usertodo.reversed.toList();
      } else {
        return usertodo.reversed.toList();
      }
    } else {
      return usertodo.reversed.toList();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
        backgroundColor: Color.fromARGB(255, 168, 231, 229),
        floatingActionButton: FloatingActionButton(
          backgroundColor: Constants.themeColor,
          onPressed: () {
            getInputtext();
            _titleController.text = "";
            _descController.text = "";
          },
          child: Icon(Icons.add),
        ),
        appBar: AppBar(
          automaticallyImplyLeading: false,
          backgroundColor: Constants.themeColor,
          actions: [
            IconButton(onPressed: () {}, icon: Icon(Icons.person)),
            IconButton(
                onPressed: () => showDialog<String>(
                      context: context,
                      builder: (BuildContext context) => AlertDialog(
                        backgroundColor: Color.fromARGB(255, 168, 231, 229),
                        title: const Text('Log out'),
                        content: const Text('Are you sure to log out?'),
                        actions: <Widget>[
                          TextButton(
                            onPressed: () => Navigator.pop(context, 'Cancel'),
                            child: const Text('Cancel',
                                style: TextStyle(color: Colors.black)),
                          ),
                          TextButton(
                            onPressed: () async {
                              SharedPreferences prefs =
                                  await SharedPreferences.getInstance();
                              prefs.remove('email');
                              prefs.remove('username');
                              Navigator.pushReplacement(
                                  context,
                                  MaterialPageRoute(
                                      builder: (BuildContext ctx) => SignIn()));
                            },
                            child: const Text(
                              'Exit',
                              style: TextStyle(color: Colors.black),
                            ),
                          ),
                        ],
                      ),
                    ),
                icon: Icon(Icons.exit_to_app))
          ],
          title: Text("Welcome ${widget.username}!"),
        ),
        body: Padding(
          padding: const EdgeInsets.all(8.0),
          child: Column(children: [
            Expanded(
              child: FutureBuilder(
                  future: getdata(),
                  builder: ((context, AsyncSnapshot<List<UserTodo>?> snapshot) {
                    if (!snapshot.hasData) {
                      return Center(
                        child: CircularProgressIndicator(
                            // color: Constants.themeColor,
                            ),
                      );
                    } else {
                      return ListView.builder(
                          itemCount: usertodo.length,
                          itemBuilder: (context, index) {
                            return Card(
                              color: Color.fromARGB(255, 164, 244, 242),
                              elevation: 20,
                              child: Padding(
                                padding: const EdgeInsets.all(10.0),
                                child: Column(
                                  children: <Widget>[
                                    Row(
                                      mainAxisAlignment:
                                          MainAxisAlignment.spaceBetween,
                                      children: [
                                        Flexible(
                                          child: Container(
                                            padding: const EdgeInsets.only(
                                                right: 13.0),
                                            child: Text(
                                              snapshot.data![index].title
                                                  .toString(),
                                              overflow: TextOverflow.visible,
                                              style: const TextStyle(
                                                fontSize: 18.0,
                                                fontWeight: FontWeight.bold,
                                              ),
                                            ),
                                          ),
                                        ),
                                        ElevatedButton(
                                            style: ElevatedButton.styleFrom(
                                              elevation: 10,
                                              backgroundColor:
                                                  Constants.themeColor,
                                            ),
                                            onPressed: () {
                                              updatedata(
                                                  snapshot.data![index].id
                                                      .toString(),
                                                  snapshot.data![index].title
                                                      .toString(),
                                                  snapshot.data![index].desc
                                                      .toString(),
                                                  snapshot.data![index].owner
                                                      .toString());
                                            },
                                            child: Text("Edit"))
                                      ],
                                    ),
                                    Row(
                                      mainAxisAlignment:
                                          MainAxisAlignment.spaceBetween,
                                      children: [
                                        Flexible(
                                          child: Container(
                                            padding: const EdgeInsets.only(
                                                right: 13.0),
                                            child: Text(
                                              snapshot.data![index].desc
                                                  .toString(),
                                              overflow: TextOverflow.visible,
                                              style: const TextStyle(
                                                fontSize: 18.0,
                                                fontWeight: FontWeight.bold,
                                              ),
                                            ),
                                          ),
                                        ),
                                        IconButton(
                                            color: Constants.themeColor,
                                            onPressed: () => showDialog<String>(
                                                  context: context,
                                                  builder:
                                                      (BuildContext context) =>
                                                          AlertDialog(
                                                    backgroundColor:
                                                        Color.fromARGB(
                                                            255, 168, 231, 229),
                                                    title: const Text(
                                                        'Delete Task'),
                                                    content: const Text(
                                                        'Are you sure?'),
                                                    actions: <Widget>[
                                                      TextButton(
                                                        onPressed: () =>
                                                            Navigator.pop(
                                                                context,
                                                                'Cancel'),
                                                        child: const Text(
                                                            'Cancel',
                                                            style: TextStyle(
                                                                color: Colors
                                                                    .black)),
                                                      ),
                                                      TextButton(
                                                        onPressed: () {
                                                          setState(() {
                                                            deleteAlbum(snapshot
                                                                .data![index].id
                                                                .toString());
                                                          });
                                                          Navigator.pop(
                                                              context, 'ok');
                                                        },
                                                        child: const Text(
                                                          'Yes',
                                                          style: TextStyle(
                                                              color:
                                                                  Colors.black),
                                                        ),
                                                      ),
                                                    ],
                                                  ),
                                                ),
                                            icon: Icon(Icons.delete))
                                      ],
                                    ),
                                  ],
                                ),
                              ),
                            );
                          });
                    }
                  })),
            )
          ]),
        ));
  }
}
